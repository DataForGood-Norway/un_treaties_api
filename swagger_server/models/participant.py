# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.region import Region  # noqa: F401,E501
from swagger_server import util


class Participant(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self, id: int = None, name: str = None, region: Region = None
    ):  # noqa: E501
        """Participant - a model defined in Swagger

        :param id: The id of this Participant.  # noqa: E501
        :type id: int
        :param name: The name of this Participant.  # noqa: E501
        :type name: str
        :param region: The region of this Participant.  # noqa: E501
        :type region: Region
        """
        self.swagger_types = {"id": int, "name": str, "region": Region}

        self.attribute_map = {"id": "id", "name": "name", "region": "region"}

        self._id = id
        self._name = name
        self._region = region

    @classmethod
    def from_dict(cls, dikt) -> "Participant":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Participant of this Participant.  # noqa: E501
        :rtype: Participant
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Participant.


        :return: The id of this Participant.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Participant.


        :param id: The id of this Participant.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Participant.


        :return: The name of this Participant.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Participant.


        :param name: The name of this Participant.
        :type name: str
        """
        if name is None:
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def region(self) -> Region:
        """Gets the region of this Participant.


        :return: The region of this Participant.
        :rtype: Region
        """
        return self._region

    @region.setter
    def region(self, region: Region):
        """Sets the region of this Participant.


        :param region: The region of this Participant.
        :type region: Region
        """
        if region is None:
            raise ValueError(
                "Invalid value for `region`, must not be `None`"
            )  # noqa: E501

        self._region = region
