# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.tag import Tag  # noqa: F401,E501
from swagger_server.models.treaty import Treaty  # noqa: F401,E501
from swagger_server import util


class Chapter(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, treaties: List[Treaty]=None, tags: List[Tag]=None):  # noqa: E501
        """Chapter - a model defined in Swagger

        :param id: The id of this Chapter.  # noqa: E501
        :type id: int
        :param name: The name of this Chapter.  # noqa: E501
        :type name: str
        :param treaties: The treaties of this Chapter.  # noqa: E501
        :type treaties: List[Treaty]
        :param tags: The tags of this Chapter.  # noqa: E501
        :type tags: List[Tag]
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'treaties': List[Treaty],
            'tags': List[Tag]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'treaties': 'treaties',
            'tags': 'tags'
        }

        self._id = id
        self._name = name
        self._treaties = treaties
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'Chapter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Chapter of this Chapter.  # noqa: E501
        :rtype: Chapter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Chapter.


        :return: The id of this Chapter.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Chapter.


        :param id: The id of this Chapter.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Chapter.


        :return: The name of this Chapter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Chapter.


        :param name: The name of this Chapter.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def treaties(self) -> List[Treaty]:
        """Gets the treaties of this Chapter.


        :return: The treaties of this Chapter.
        :rtype: List[Treaty]
        """
        return self._treaties

    @treaties.setter
    def treaties(self, treaties: List[Treaty]):
        """Sets the treaties of this Chapter.


        :param treaties: The treaties of this Chapter.
        :type treaties: List[Treaty]
        """

        self._treaties = treaties

    @property
    def tags(self) -> List[Tag]:
        """Gets the tags of this Chapter.


        :return: The tags of this Chapter.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[Tag]):
        """Sets the tags of this Chapter.


        :param tags: The tags of this Chapter.
        :type tags: List[Tag]
        """

        self._tags = tags
